# Automated staged deploy to DockerHub:
# 1. build
# 2. test
# 3. inspect
# 4. remove

sudo: required
services:
  - docker

matrix:
  :include:
    - env: BASEIMAGE="alpine/base"
    - env: BASEIMAGE="alpine/runit"
    - env: BASEIMAGE="alpine/s6"
    - env: BASEIMAGE="archlinux/base"
    - env: BASEIMAGE="archlinux/s6"
    - env: BASEIMAGE="archlinux/systemd"
    - env: BASEIMAGE="centos/7"
    - env: BASEIMAGE="centos/7-s6"
    - env: BASEIMAGE="centos/7-systemd"
    - env: BASEIMAGE="debian/stretch"
    - env: BASEIMAGE="debian/stretch-s6"
    - env: BASEIMAGE="debian/stretch-systemd"
    - env: BASEIMAGE="ubuntu/18.04"
    - env: BASEIMAGE="ubuntu/18.04-s6"
    - env: BASEIMAGE="ubuntu/18.04-systemd"
    - env: SUBIMAGE="ansible/ansible-container"
    - env: SUBIMAGE="ansible/ansible-playbook"
    - env: SUBIMAGE="ansible/archlinux"
    - env: SUBIMAGE="ansible/centos-7"
    - env: SUBIMAGE="ansible/debian-stretch"
    - env: SUBIMAGE="ansible/ubuntu-18.04"
    - env: SUBIMAGE="vim-plugin/alpine"
    - env: SUBIMAGE="vim-plugin/centos-7"
    - env: SUBIMAGE="vim-plugin/ubuntu-18.04"
    - env: SUBIMAGE="ykman/entrypoint"

# Baseimages build in parallel, first, and if they are successful the subimages build in
# parallel afterwards.
jobs:
  include:
    - stage: build docker baseimages
      script:
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - make $BASEIMAGE
      after_script:
      # Inspect the Docker container post-test to aid in debugging.
      - make inspect
      - make cleanall
    - stage: build docker subimages
      script:
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - make $SUBIMAGE
      after_script:
      # Inspect the Docker container, post-test, to aid in debugging.
      - make inspect
      - make cleanall
